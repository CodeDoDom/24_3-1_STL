

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 5일 화요일			(1주 1일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 콘솔창 크기 80x25
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	//for (char c : v)
	//	std::cout << c;

	out << std::endl << std::endl;
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	out << std::endl << std::endl;
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
저장한 시간: 
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick
	std::cout << now << std::endl;

	// 시간형식으로 변환
	// 현지 시간으로 변환
	// 한국형식으로 출력

	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << "저장한 시간: " << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
저장한 시간: 2024-03-07 목요일 오후 1:46:43
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = localtime(&utc);
	
	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	



	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << "저장한 시간: " << std::put_time(lt, "%x %A %X") << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	out.imbue(old);


	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
저장한 시간: 2024-03-07 목요일 오후 1:50:12
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = localtime(&utc);
	
	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	



	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << "저장한 시간: " << std::put_time(lt, "%x %A %X") << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	out.imbue(old);


	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 1:53:23
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

//--------
int main()
//--------

{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

//----------------------------------
void save(std::string_view fileName)
//----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = localtime(&utc);
	
	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	
	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << fileName << std::put_time(lt, ":, %x %A %X") << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	out.imbue(old);

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
save.h:, 2024-03-07 목요일 오후 2:07:36
================================================

//------------------------------------------------------------------------
// save.h		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#pragma once

void save(std::string_view);

================================================
save.cpp:, 2024-03-07 목요일 오후 2:07:36
================================================

//------------------------------------------------------------------------
// save.cpp		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"

//----------------------------------
void save(std::string_view fileName)
//----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick
	auto utc = std::chrono::system_clock::to_time_t(now);
	auto lt = localtime(&utc);

	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "================================================" << '\n';
	out << fileName << std::put_time(lt, ":, %x %A %X") << '\n';
	out << "================================================" << '\n';
	out << '\n';

	out.imbue(old);

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 2:07:36
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
//				 - C++언어 SDL 검사 - no
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::cout << "save 기능을 완성함" << std::endl;
	save("save.h");
	save("save.cpp");
	save("STL.cpp");
}


================================================
save.h:, 2024-03-07 목요일 오후 2:08:05
================================================

//------------------------------------------------------------------------
// save.h		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#pragma once

void save(std::string_view);

================================================
save.cpp:, 2024-03-07 목요일 오후 2:08:05
================================================

//------------------------------------------------------------------------
// save.cpp		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"

//----------------------------------
void save(std::string_view fileName)
//----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick
	auto utc = std::chrono::system_clock::to_time_t(now);
	auto lt = localtime(&utc);

	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "================================================" << '\n';
	out << fileName << std::put_time(lt, ":, %x %A %X") << '\n';
	out << "================================================" << '\n';
	out << '\n';

	out.imbue(old);

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 2:08:05
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
//				 - C++언어 SDL 검사 - no
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::cout << "save 기능을 완성함" << std::endl;
	save("save.h");
	save("save.cpp");
	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-07 목요일 오후 2:33:56
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp;

	tmp = a;
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 2:35:16
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 3:07:14
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog;					// forward declaration
void change(int&, int&);
void change(Dog&, Dog&);

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.
// 출력 연산자 오버로딩...........?
class Dog {
public:
	Dog(int n) : num(num) {}
	// Dog(const Dog&) {};	// 복사 생성할 필요 없음. 
	// 이유 - 이 함수는 special function임. special function은 필요하면 컴파일러가 자동으로 생성. 즉 생성할 필요 x
	operator int() { return num; }	// 이거 뭐지?

private:
	int num;
};

//--------
int main()
//--------
{
	Dog a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(Dog& a, Dog& b)
{
	Dog tmp{ a };		// copy construction	복사 생성
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 3:09:03
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog;					// forward declaration
void change(int&, int&);
void change(Dog&, Dog&);

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.
// 출력 연산자 오버로딩...........?
class Dog {
public:
	Dog(int n) : num(num) {}
	// Dog(const Dog&) {};	// 복사 생성할 필요 없음. 
	// 이유 - 이 함수는 special function임. special function은 필요하면 컴파일러가 자동으로 생성. 즉 생성할 필요 x
	//operator int() { return num; }	// 이거 뭐지?
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num;
};

//--------
int main()
//--------
{
	Dog a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(Dog& a, Dog& b)
{
	Dog tmp{ a };		// copy construction	복사 생성
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 3:09:52
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog;					// forward declaration
void change(int&, int&);
void change(Dog&, Dog&);

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.
// 출력 연산자 오버로딩...........?
class Dog {
public:
	Dog(int n) : num(n) {}
	// Dog(const Dog&) {};	// 복사 생성할 필요 없음. 
	// 이유 - 이 함수는 special function임. special function은 필요하면 컴파일러가 자동으로 생성. 즉 생성할 필요 x
	//operator int() { return num; }	// 이거 뭐지?
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num;
};

//--------
int main()
//--------
{
	Dog a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(Dog& a, Dog& b)
{
	Dog tmp{ a };		// copy construction	복사 생성
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-12 화요일 오후 2:03:09
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int i = 0; i < 100; i++)
		a[i] = uid(dre);

	for (int i = 0; i < 100; i++)
		std::cout << a[i] << '\t';
	std::cout << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:04:52
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int i = 0; i < 100; i++)
		a[i] = uid(dre);

	for (int i = 0; i < 100; i++)
		std::cout << std::format("{:80}", a[i]);
	std::cout << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:05:29
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int i = 0; i < 100; i++)
		a[i] = uid(dre);

	for (int i = 0; i < 100; i++)
		std::cout << std::format("{:8}", a[i]);
	std::cout << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:07:30
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++20
#include <print>	// C++23
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int i = 0; i < 100; i++)
		a[i] = uid(dre);

	for (int i = 0; i < 100; i++)
		std::print(std::cout, "{:8}", a[i]);
	std::cout << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:13:38
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++20
#include <print>	// C++23
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:20:00
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++20
#include <print>	// C++23
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제2] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 100; j++)
		{
			if (a[i] > a[j])
			{
				int tmp = a[i];
				a[i] = a[j];
				a[j] = tmp;
			}
		}
	}

	std::cout << "가장 큰 값: " << a[99] << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:25:11
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++20
#include <print>	// C++23
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제2] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.
	int maxValue = std::numeric_limits<int>::min();

	for (int num : a) {
		if (num > maxValue)
			maxValue = num;
	}

	std::cout << "최댓값: " << maxValue << '\n';

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:35:32
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++20
#include <print>	// C++23
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제2] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.
	auto pos = std::max_element( std::begin(a), std::end(a) );
	std::cout << "최댓값: " << *pos << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:36:31
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <format>	// C++20
#include <print>	// C++23
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 생성하라.
// [0, 9'9999] 범위의 값을 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	int a[100];		// 앞으로 T[N] 은 사용하지 않는다.
	
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제2] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.
	//auto pos = std::max_element( std::begin(a), std::end(a) );
	//std::cout << "최댓값: " << *pos << std::endl;	// 역참조 오퍼레이터
	std::cout << *std::max_element(std::begin(a), std::end(a)) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 2:59:35
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <random>
#include <array>
#include <fstream>
#include <format>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	std::array<int, 100> a;		// 앞으로 T[N] 은 사용하지 않는다. T[N] 대신 array<T, N>을 사용.
	
	for (int& num : a)
		num = uid(dre);

	// [문제] 파일 "int값들.txt"에서 a의 int값을 모두 저장하라.
	std::ofstream out{ "int값들.txt" };			// RAII
	for (int num : a)
		print(out, "{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 3:06:26
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "int값들.txt"에는 몇 개인지 모르는 int 값이 있다.
// 그중 제일 큰 값을 찾아 화면에 출력하라.

//--------
int main()
//--------
{
	std::ifstream in{ "int값들.txt" };
	if (not in)
		exit(0);

	int num;
	int cnt{};
	int maxValue = std::numeric_limits<int>::min();

	while (in >> num) {
		++cnt;
		if (maxValue < num)
			maxValue = num;
	}

	std::cout << "int 개수 : " << cnt << std::endl;
	std::cout << "최댓값 : " << maxValue << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-12 화요일 오후 3:08:54
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 12일 화요일			(2주 1일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "int값들.txt"에는 몇 개인지 모르는 int 값이 있다.
// 그중 제일 큰 값을 찾아 화면에 출력하라.

//--------
int main()
//--------
{
	std::ifstream in{ "int값들.txt" };
	if (not in)
		exit(0);

	std::cout << *std::max_element(std::istream_iterator<int>{in}, {}) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 1:38:15
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//--------
int main()
//--------
{
	std::array<int, 100> a;

	for (int num : a)
		std::cout << num << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 1:39:21
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//--------
int main()
//--------
{
	std::array<int, 100> a{};	// {} 붙이면 default로 초기화 됨

	for (int num : a)
		std::cout << num << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 1:40:32
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

std::array<int, 100> a;	// a 뒤에 {} 붙이면 default로 초기화 됨

//--------
int main()
//--------
{

	for (int num : a)
		std::cout << num << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 1:45:42
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//std::array<int, 100> a;
// 전역변수로 선언하면, data segment에 생김.
// 초기화할 수 있기 때문에, 초기화 되지 않은 data 섹션에 만들어짐
// 그래서 초기화됨.

//--------
int main()
//--------
{
	std::array<int, 100> a;

	for (int i = 0; i < 100; i++)
		a[i] = i + 1;

	for (int num : a)
		std::print(std::cout, "{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 1:47:09
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//std::array<int, 100> a;
// 전역변수로 선언하면, data segment에 생김.
// 초기화할 수 있기 때문에, 초기화 되지 않은 data 섹션에 만들어짐
// 그래서 초기화됨.

//--------
int main()
//--------
{
	std::array<int, 100> a;

	int i{};
	for (int& num : a)
		num = ++i;

	for (int num : a)
		std::print(std::cout, "{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 1:57:19
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include <numeric>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//std::array<int, 100> a;
// 전역변수로 선언하면, data segment에 생김.
// 초기화할 수 있기 때문에, 초기화 되지 않은 data 섹션에 만들어짐
// 그래서 초기화됨.

//--------
int main()
//--------
{
	std::array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	for (int num : a)
		std::print(std::cout, "{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 2:02:13
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include <numeric>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//std::array<int, 100> a;
// 전역변수로 선언하면, data segment에 생김.
// 초기화할 수 있기 때문에, 초기화 되지 않은 data 섹션에 만들어짐
// 그래서 초기화됨.

//--------
int main()
//--------
{
	std::array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	std::ofstream out{ "int값들_0314.txt" };

	for (int num : a)
		std::print(out, "{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 2:05:09
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include <numeric>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//std::array<int, 100> a;
// 전역변수로 선언하면, data segment에 생김.
// 초기화할 수 있기 때문에, 초기화 되지 않은 data 섹션에 만들어짐
// 그래서 초기화됨.

//--------
int main()
//--------
{
	std::array<int, 100> a;

	iota(a.begin(), a.end(), 1);

	std::ofstream out{ "int값들_0314.txt" };

	for (int num : a)
		std::print(out, "{} ", num);

	// int 100개를 저장하기 위해 필요한 공간은?

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 2:42:32
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include <numeric>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int값을 1부터 시작하는 정수로 채워라.
// 파일 "int값들_0314.txt"에 기억하라.

//std::array<int, 100> a;
// 전역변수로 선언하면, data segment에 생김.
// 초기화할 수 있기 때문에, 초기화 되지 않은 data 섹션에 만들어짐
// 그래서 초기화됨.

//--------
int main()
//--------
{
	std::array<int, 1000> a;

	iota(a.begin(), a.end(), 1);

	std::ofstream out{ "int값들_0314.txt", std::ios::binary };

	out.write((char*)a.data(), a.size() * sizeof(int));

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 2:44:20
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include <numeric>
#include <fstream>
#include <random>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//--------
int main()
//--------
{
	std::array<int, 1000> a;

	for (int num : a)
		num = uid(dre);

	std::ofstream out{ "int값들_0314", std::ios::binary };

	out.write((char*)a.data(), a.size() * sizeof(int));

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 2:44:51
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <print>
#include <numeric>
#include <fstream>
#include <random>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

std::default_random_engine dre;
std::uniform_int_distribution uid;

//--------
int main()
//--------
{
	std::array<int, 1000> a;

	for (int num : a)
		num = uid(dre);

	std::ofstream out{ "int값들_0314", std::ios::binary };

	out.write((char*)a.data(), a.size() * sizeof(int));

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-14 목요일 오후 2:57:08
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 14일 목요일			(2주 2일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int값 1000개를 "int값들_0314_문제"에 저장하였다.
// 파일은 binary 모드로 열었고,
// 값은 메모리 크기 그대로 4'000 바이트를 기록하였다.
// int값 중 가장 큰 값을 찾아 화면에 출력하라.

std::default_random_engine dre;
std::uniform_int_distribution uid;

//--------
int main()
//--------
{
	// 내가 푼 것
	std::array<int, 1000> a;

	for (int& num : a)
		num = uid(dre);

	std::ofstream out{ "int값들_0314_문제", std::ios::binary };
	out.write((char*)a.data(), a.size() * sizeof(int));

	for (int num : a)
		std::cout << num << std::endl;

	auto pos = std::max_element(std::begin(a), std::end(a));
	std::cout << "최댓값: " << *pos << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 1:45:12
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include <random>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어있따.
// 파일은 binary 모드이고, write 함수로 sizeof(Dog)*100 바이트를 기록하였다.
// 파일을 읽어 가장 num 값이 큰 Dog 정보를 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:
	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들" };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}

	Dog dog;

	for (int i = 0; i < 100; i++) {
		in.read((char*)&dog, sizeof(Dog));
		dog.Show();
	}

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 1:47:36
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어있따.
// 파일은 binary 모드이고, write 함수로 sizeof(Dog)*100 바이트를 기록하였다.
// 파일을 읽어 가장 num 값이 큰 Dog 정보를 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:
	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}

	Dog dog;

	for (int i = 0; i < 100; i++) {
		in.read((char*)&dog, sizeof(Dog));
		dog.Show();
	}

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 1:58:32
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어있따.
// 파일은 binary 모드이고, write 함수로 sizeof(Dog)*100 바이트를 기록하였다.
// 파일을 읽어 가장 num 값이 큰 Dog 정보를 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:
	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	// 100번째 Dog, c-i, num--2228

	std::array<Dog,100> dogs;

	in.read((char*)&dogs, sizeof(Dog) * 100);

	for (const Dog& dog : dogs)
		dog.Show();

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 2:11:42
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 몇 개인지 모르는 class Dog 객체가 기록되어 있다.
// 파일은 binary 모드이고, write 함수로 모든 객체를 한 번의 write()로 기록하였다.
// 파일을 읽어 가장 num 값이 큰 Dog 정보를 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:	// 스페셜 함수(생성/소멸) -> 오퍼레이터() -> Show() 등등 -> friend()
	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		return is.read((char*)&dog, sizeof(Dog));
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	// 100번째 Dog, c-i, num--2228

	// in 파일의 크기를 filesystem을 이용하여 얻는다.
	// 파일사이즈/sizeof(Dog) -> 100개
	//new Dog[num];		// num == 100

	Dog dog;
	int cnt{};
	while (in >> dog)
		++cnt;

	std::cout << "읽은 Dog의 개수: " << cnt << std::endl;
	dog.Show();	// 100번째 개체의 정보가 나옴

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 2:21:26
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어 있다.
// 파일은 binary 모드이고, write 함수로 모든 객체를 한 번의 write()로 기록하였다.
// 파일을 읽어 가장 num 값이 큰 Dog 정보를 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:	// 스페셜 함수(생성/소멸) -> 오퍼레이터() -> Show() 등등 -> friend()
	int getNum() const {
		return num;
	}

	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		return is.read((char*)&dog, sizeof(Dog));
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	
	std::array<Dog, 100> dogs;
	in.read(reinterpret_cast<char*>(dogs.data()), sizeof(Dog)*100);

	Dog maxDog;
	int maxValue{ std::numeric_limits<int>::min() };

	for (const Dog& dog : dogs) {
		if (maxValue < dog.getNum()) {
			maxValue = dog.getNum();
			maxDog = dog;
		}
	}

	std::cout << "num 값이 가장 큰 Dog" << std::endl;
	maxDog.Show();
	// Dog, c-y, num-9929

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 2:46:08
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어 있다.
// 파일은 binary 모드이고, write 함수로 모든 객체를 한 번의 write()로 기록하였다.
// 파일을 읽어 가장 num 값이 큰 Dog 정보를 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:	// 스페셜 함수(생성/소멸) -> 오퍼레이터() -> Show() 등등 -> friend()
	int getNum() const {
		return num;
	}

	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		return is.read((char*)&dog, sizeof(Dog));
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	
	std::array<Dog, 100> dogs;
	in.read(reinterpret_cast<char*>(dogs.data()), sizeof(Dog)*100);

	auto pos = std::max_element(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.getNum() < b.getNum();
		});

	std::cout << "num 값이 가장 큰 Dog" << std::endl;
	pos->Show();	// (*pos).Show()와 똑같지만, 이렇게 쓰면 안됨.
	// Dog, c-y, num-9929

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 3:00:01
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어 있다.
// 파일은 binary 모드이고, write 함수로 모든 객체를 한 번의 write()로 기록하였다.
// 파일을 읽어 num 값이 1'0000 미만인 Dog 객체는 몇 개인지 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:	// 스페셜 함수(생성/소멸) -> 오퍼레이터() -> Show() 등등 -> friend()
	int getNum() const {
		return num;
	}

	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		return is.read((char*)&dog, sizeof(Dog));
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	
	std::array<Dog, 100> dogs;
	in.read(reinterpret_cast<char*>(dogs.data()), sizeof(Dog)*100);

	int cnt{};
	for (const Dog& dog : dogs) {
		dog.Show();
		if (dog.getNum() < 1'0000) {
			++cnt;
		}
	}

	std::cout << "1,0000 미만인 num의 개수: " << cnt << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 3:03:35
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어 있다.
// 파일은 binary 모드이고, write 함수로 모든 객체를 한 번의 write()로 기록하였다.
// 파일을 읽어 num 값이 1'0000 미만인 Dog 객체는 몇 개인지 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:	// 스페셜 함수(생성/소멸) -> 오퍼레이터() -> Show() 등등 -> friend()
	int getNum() const {
		return num;
	}

	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		return is.read((char*)&dog, sizeof(Dog));
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	
	std::array<Dog, 100> dogs;
	in.read(reinterpret_cast<char*>(dogs.data()), sizeof(Dog)*100);

	int num = std::count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
		if (1'0000 < dog.getNum())
			return true;
		return false;
		});

	std::cout << "개수: " << num << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-19 화요일 오후 3:07:34
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 19일 화요일			(3주 1일)
// 
// FILE I/O text/binary - high/low level
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "개들"에는 class Dog 객체 100개가 기록되어 있다.
// 파일은 binary 모드이고, write 함수로 모든 객체를 한 번의 write()로 기록하였다.
// 파일을 읽어 num 값이 1'0000 미만인 Dog 객체는 몇 개인지 화면에 출력하라.
// class Dog의 멤버는 다음과 같다.

class Dog {
	char c;
	int num;

public:	// 스페셜 함수(생성/소멸) -> 오퍼레이터() -> Show() 등등 -> friend()
	int getNum() const {
		return num;
	}

	void Show() const {
		std::cout << "Dog, c-" << c << ", num-" << num << std::endl;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		return is.read((char*)&dog, sizeof(Dog));
	}
};

//--------
int main()
//--------
{
	std::ifstream in{ "개들", std::ios::binary };

	if (not in) {
		std::cout << "파일을 열 수 없음" << std::endl;
		return 0;
	}
	
	std::array<Dog, 100> dogs;
	in.read((char*)(dogs.data()), sizeof(Dog)*100);

	int num = std::count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
		if (1'0000 > dog.getNum())
			return true;
		return false;
		});

	std::cout << "개수: " << num << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:38:26
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::array<int, 10> a;
	std::cout << "STACK" << std::endl;
	std::cout << "array<int,10> - " << std::addressof(a) << std::endl;
	std::cout << "a[0] - a[9]" << std::endl;
	
	for (int& num : a)
		std::cout << std::addressof(num) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:41:00
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::array<int, 10> a;
	std::cout << "STACK" << std::endl;
	std::cout << "array<int,10> - " << std::addressof(a) << std::endl;
	std::cout << "a[0] - a[9]" << std::endl;
	
	for (int& num : a)
		std::cout << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::string s{ "스트링" };
	std::cout << std::addressof(s) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:45:43
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::array<int, 10> a;
	std::cout << "STACK" << std::endl;
	std::cout << "array<int,10> - " << std::addressof(a) << std::endl;
	std::cout << "a[0] - a[9]" << std::endl;
	
	for (int& num : a)
		std::cout << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::string s{ "스트링" };
	std::cout << std::addressof(s) << std::endl;

	std::cout << std::endl;
	int num;
	std::cout << std::addressof(num) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:46:51
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::cout << std::endl;
	int num;
	std::cout << std::addressof(num) << std::endl;

	std::array<int, 10> a;
	std::cout << "STACK" << std::endl;
	std::cout << "array<int,10> - " << std::addressof(a) << std::endl;
	std::cout << "a[0] - a[9]" << std::endl;
	
	for (int& num : a)
		std::cout << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::string s{ "스트링" };
	std::cout << std::addressof(s) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:51:42
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f()
{
	int num;
	std::cout << std::addressof(num) << std::endl;
}

//--------
int main()
//--------
{
	// 이들은 같은 동네임
	int num;
	std::cout << std::addressof(num) << std::endl;

	std::array<int, 10> a;
	std::string s{ "스트링" };

	f();

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:52:37
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f(int a)
{
	int num;
	std::cout << std::addressof(num) << std::endl;
	std::cout << a << std::endl;
}

//--------
int main()
//--------
{
	// 이들은 같은 동네임
	int num;
	std::cout << std::addressof(num) << std::endl;

	std::array<int, 10> a;
	std::string s{ "스트링" };

	f(123);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:53:34
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f(int a)
{
	int num;
	std::cout << std::addressof(num) << std::endl;
	std::cout << "인자 주소: " << std::addressof(a) << std::endl;
}

//--------
int main()
//--------
{
	// 이들은 같은 동네임
	int num;
	std::cout << std::addressof(num) << std::endl;

	std::array<int, 10> a;
	std::string s{ "스트링" };

	f(123);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 1:53:47
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f(int a)
{
	int num;
	std::cout << std::addressof(num) << std::endl;
	std::cout << std::addressof(a) << std::endl;
}

//--------
int main()
//--------
{
	// 이들은 같은 동네임
	int num;
	std::cout << std::addressof(num) << std::endl;

	std::array<int, 10> a;
	std::string s{ "스트링" };

	f(123);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:13:32
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f()
{
}

//--------
int main()
//--------
{
	int num;
	
	(*f)();		// f();

	std::cout << "STACK" << std::endl;
	std::cout << "      - num " << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::cout << "CODE " << std::endl;
	std::cout << "      - main" << std::addressof(main) << std::endl;
	std::cout << "      - f   " << std::addressof(f) << std::endl;
	std::cout << "      - save" << std::addressof(save) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:13:50
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f()
{
}

//--------
int main()
//--------
{
	int num;
	
	(*f)();		// f();

	std::cout << "STACK" << std::endl;
	std::cout << "      - num  " << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::cout << "CODE " << std::endl;
	std::cout << "      - main " << std::addressof(main) << std::endl;
	std::cout << "      - f    " << std::addressof(f) << std::endl;
	std::cout << "      - save " << std::addressof(save) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:16:08
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <string>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

void f()
{
}

//--------
int main()
//--------
{
	long long val{ 0x7F'FF'FF'FF'FF'FF };
	std::cout << "사용할 수 있는 최대 메모리 한계 - " << val << std::endl;

	int num;
	
	(*f)();		// f();

	std::cout << "STACK" << std::endl;
	std::cout << "      - num  " << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::cout << "CODE " << std::endl;
	std::cout << "      - main " << std::addressof(main) << std::endl;
	std::cout << "      - f    " << std::addressof(f) << std::endl;
	std::cout << "      - save " << std::addressof(save) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:26:01
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

int num;

//--------
int main()
//--------
{
	int num;
	
	std::cout << "STACK" << std::endl;
	std::cout << "        - num  " << std::addressof(num) << std::endl;

	std::cout << std::endl;
	std::cout << "CODE " << std::endl;
	std::cout << "        - main " << std::addressof(main) << std::endl;
	std::cout << std::endl;

	std::cout << "DATA " << std::endl;
	std::cout << " global - num  " << std::addressof(::num) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:35:29
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

int num;

//--------
int main()
//--------
{
	int num;

	int* p = new int;
	
	std::cout << "STACK      " << std::addressof(num) << std::endl;
	std::cout << "free store " << std::addressof(*p) << std::endl;
	std::cout << "CODE       " << std::addressof(main) << std::endl;
	std::cout << "DATA       " << std::addressof(::num) << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:53:56
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

char c[0x7f'ff'ff'ff];

//--------
int main()
//--------
{
	std::cout << "사용 가능한 최대 배열 크기 - " << 0x7f'ff'ff'ff << std::endl;
	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 2:55:24
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

char c1[0x7f'ff'ff'ff];
char c2[0x7f'ff'ff'ff];
char c3[0x7f'ff'ff'ff];
char c4[0x7f'ff'ff'ff];

//--------
int main()
//--------
{
	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 3:02:15
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

char c1[0x6f'ff'ff'ff] { 1 };

//--------
int main()
//--------
{
	c1[12345678] = 333;
	std::cout << c1[12345678] << std::endl;
	std::cout << c1 << std::endl;
	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 3:04:15
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

char c1[123456789] { 1 };
char c2[1'000'000'000]{ 1 };
char c3[1'000'000'000]{ 1 };
char c4[1'000'000'000]{ 1 };

//--------
int main()
//--------
{
	c1[12345678] = 333;
	std::cout << c1[12345678] << std::endl;
	std::cout << c1 << std::endl;
	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 3:06:01
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

int a[1'000'000];

//--------
int main()
//--------
{
	std::cout << a[0] << std::endl;
	std::cout << a[999'999] << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-21 목요일 오후 3:06:35
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 21일 목요일			(3주 2일)
// 
// 실행파일의 메모리 구조 - 찾아보세요: STACK CODE DATA Free Store
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

int a[1'000'000]{ 1 };		// 실행하는데 시간이 더 걸림

//--------
int main()
//--------
{
	std::cout << a[0] << std::endl;
	std::cout << a[999'999] << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:07:19
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		int num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			*(p + sizeof(int) * i) = i + 1;		// p[i] = i + 1;

		int sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:08:03
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		int num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		int sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:09:28
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		int num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		long sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:10:29
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		int num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		long long sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:12:42
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		long long sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:13:19
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		long long sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:14:12
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		long long sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:18:33
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 1부터 시작하는 정수로 채워라.
// int 값의 합계를 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		try{
			p = new int[num];
		}
		catch (const std::exception& e) {
			std::cout << "메모리 확보 실패" << std::endl;
			std::cout << e.what() << std::endl;
		}

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;		// p[i] = i + 1;

		long long sum{};
		for (int i = 0; i < num; ++i)
			sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:26:26
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		std::iota(p, p + num, 1);		//for (int i = 0; i < num; ++i)
										//	p[i] = i + 1;

		long long sum  = std::accumulate(p, p + num, 0);				//long long sum{};
																		//for (int i = 0; i < num; ++i)
																		//	sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:31:03
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		std::iota(p, p + num, 1);		//for (int i = 0; i < num; ++i)
										//	p[i] = i + 1;

		long long sum  = std::accumulate(p, p + num, static_cast<long long> (0));				//long long sum{};
																		//for (int i = 0; i < num; ++i)
																		//	sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:31:18
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		std::iota(p, p + num, 1);		//for (int i = 0; i < num; ++i)
										//	p[i] = i + 1;

		long long sum  = std::accumulate(p, p + num, 0LL);				//long long sum{};
																		//for (int i = 0; i < num; ++i)
																		//	sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:33:57
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자 입력: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		std::iota(p, p + num, 1);		//for (int i = 0; i < num; ++i)
										//	p[i] = i + 1;

		auto sum  = std::accumulate(p, p + num, 0LL);				//long long sum{};
																		//for (int i = 0; i < num; ++i)
																		//	sum += p[i];

		std::cout << "합계: " << sum << std::endl;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:42:36
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include <thread>
#include "save.h"
using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

//--------
int main()
//--------
{
	save("STL.cpp");

	while (true) {
		long long num;

		std::cout << "숫자: ";
		std::cin >> num;

		int* p;
		p = new int[num];

		std::iota(p, p + num, 1);		//for (int i = 0; i < num; ++i)
										//	p[i] = i + 1;

		auto sum  = std::accumulate(p, p + num, 0LL);				//long long sum{};
																		//for (int i = 0; i < num; ++i)
																		//	sum += p[i];

		std::cout << "합계: " << sum << std::endl;

		this_thread::sleep_for(3s);
		delete[] p;
	}

}


================================================
STL.cpp:, 2024-03-26 화요일 오후 2:59:51
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include <thread>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

void f()
{
	std::cout << "f 시작" << std::endl;
	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	std::cout << "main 시작" << std::endl;
	f();
	std::cout << "main 끝" << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-26 화요일 오후 3:01:35
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include <thread>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	Dog* p;
	p = new Dog;

	delete p;
	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	std::cout << "main 시작" << std::endl;
	f();
	std::cout << "main 끝" << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-26 화요일 오후 3:05:21
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include <thread>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	std::cout << "main 시작" << std::endl;
	f();
	std::cout << "main 끝" << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-26 화요일 오후 3:08:27
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 26일 화요일			(4주 1일)
// 
// Free Store - RAII
// 
// C++ 언어에서 사용하지 않도록 권고
// - char*		-->		string
// - T[N]		-->		array<T,N>
// - T*(raw *)	-->		unique_ptr, shared_ptr(스마트 포인터)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <numeric>
#include <thread>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int num 값을 입력받아라.
// free store에서 int를 num개 할당받아라.
// int 값을 '1부터 시작하는 정수로 채워라.' iota()
// int 값의 '합계'를 출력하라. 
// 이 과정을 영원히 반복하라.
// 해결하는 코드를 답지에 적어라.

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	throw 1234;

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	std::cout << "main 시작" << std::endl;
	
	try {
		f();
	}
	catch (...) {			// ... elipses
		std::cout << "예외를 받았어요." << std::endl;
	}
	
	std::cout << "main 끝" << std::endl;

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 1:37:23
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// uniqe_ptr 사용 - 자원을 독점 소유(ownership)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <memory>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	throw 1234;

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	// Dog를 free store에 만들어본다.

	std::unique_ptr<Dog> p{new Dog};

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 1:43:31
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// uniqe_ptr 사용 - 자원을 독점 소유(ownership)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <memory>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	throw 1234;

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	// Dog 10 객체를 free store에 만들어본다.

	std::unique_ptr<Dog[]> p{new Dog[10]};

	save("STL.cpp");

	// 아래 문장 출력 후, p가 가리키는 객체가 소멸됨
	std::cout << "메인 종료" << std::endl;
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 1:44:33
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// uniqe_ptr 사용 - 자원을 독점 소유(ownership)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <memory>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	throw 1234;

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	// Dog 10 객체를 free store에 만들어본다.

	std::unique_ptr<Dog[]> p{new Dog[10]};

	save("STL.cpp");

	try {
		throw 1;
	}
	catch (...) {

	}

	// 아래 문장 출력 후, p가 가리키는 객체가 소멸됨
	std::cout << "메인 종료" << std::endl;
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 1:49:07
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// uniqe_ptr 사용 - 자원을 독점 소유(ownership)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <memory>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	throw 1234;

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	// 이 main()은 문제없지만 불편하다.	-> new와 짝이 되는 delete가 없기 때문이다.
	// 편의함수 make_unique를 사용한다.
	std::unique_ptr<Dog> p = std::make_unique<Dog>();

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 1:50:10
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// uniqe_ptr 사용 - 자원을 독점 소유(ownership)
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <memory>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog {
public:
	Dog() {
		std::cout << "생성" << std::endl;
	}
	~Dog() {
		std::cout << "소멸" << std::endl;
	}
};

class 스마트포인터 {
	Dog* p;
public:
	스마트포인터(Dog* p) :p{ p } {}
	~스마트포인터() {
		delete p;
	}
};

void f()
{
	std::cout << "f 시작" << std::endl;
	스마트포인터 p(new Dog);

	throw 1234;

	std::cout << "f 끝" << std::endl;
}

//--------
int main()
//--------
{
	// 이 main()은 문제없지만 불편하다.	-> new와 짝이 되는 delete가 없기 때문이다.
	// 편의함수 make_unique를 사용한다.
	std::unique_ptr<Dog[]> p = std::make_unique<Dog[]>( 10 );

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:03:53
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//--------
int main()
//--------
{
	std::ifstream in{ "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	char c;
	while (in.read(&c, sizeof(char)))
		std::cout << (c = toupper(c));		// toupper(): 전통적인 C 함수

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:05:06
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//--------
int main()
//--------
{
	std::ifstream in{ "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt" };

	char c;
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));		// toupper(): 전통적인 C 함수

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:06:29
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//--------
int main()
//--------
{
	std::ifstream in{ "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary };

	char c;
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));		// toupper(): 전통적인 C 함수

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:19:58
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 *변환*하여
// "STL대문자.txt"에 저장하라.

//--------
int main()
//--------
{
	std::ifstream in{ "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary };

	std::transform(std::istreambuf_iterator<char>{in}, {},
		std::ostreambuf_iterator<char>{out}, [](char c) {
			return toupper(c);
		});

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:20:01
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 *변환*하여
// "STL대문자.txt"에 저장하라.

//--------
int main()
//--------
{
	std::ifstream in{ "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary };

	std::transform(std::istreambuf_iterator<char>{in}, {},
		std::ostreambuf_iterator<char>{out}, [](char c) {
			return toupper(c);
		});

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:22:58
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 *변환(transform())*하여
// "STL대문자.txt"에 저장하라.

//--------
int main()
//--------
{
	std::ifstream in{ "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary };

	std::transform(std::istreambuf_iterator<char>{in}, {},
		std::ostreambuf_iterator<char>{std::cout}, [](char c) {
			return toupper(c);
		});

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:40:56
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// callable type -> 정렬 예제에서 시작
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 사이의 랜덤값으로 설정하라.
// int 값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{ 1, 10'000 };		//std::normal_distribution
std::default_random_engine dre;

//--------
int main()
//--------
{
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 2:55:42
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// callable type -> 정렬 예제에서 시작
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 사이의 랜덤값으로 설정하라.
// int 값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{ 1, 10'000 };		//std::normal_distribution
std::default_random_engine dre;

//--------
int main()
//--------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 오름차순 정렬한다. - qsort는 C 함수이지만, generic 함수이다.
	//qsort(어디를, 몇 개를, 한 개의 크기는?, 너만의 정렬방법을 알려줘)

	int 정렬방법(const void*, const void*);
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}
int 정렬방법(const void* a, const void* b)
{
	return *(int*)a - * (int*)b;
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 3:00:37
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// callable type -> 정렬 예제에서 시작
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 사이의 랜덤값으로 설정하라.
// int 값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{ 1, 10'000 };		//std::normal_distribution
std::default_random_engine dre;

//--------
int main()
//--------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 오름차순 정렬한다. - qsort는 C 함수이지만, generic 함수이다.
	//qsort(어디를, 몇 개를, 한 개의 크기는?, 너만의 정렬방법을 알려줘)

	int 정렬방법(const void*, const void*);
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);
	// 정렬방법은 code segment에 저장된 함수의 시작번지이다

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}
int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - * (int*)a;	// 내립차순
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 3:02:37
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// callable type -> 정렬 예제에서 시작
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 사이의 랜덤값으로 설정하라.
// int 값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{ 1, 10'000 };		//std::normal_distribution
std::default_random_engine dre;

//--------
int main()
//--------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 오름차순 정렬한다. - qsort는 C 함수이지만, generic 함수이다.
	//qsort(어디를, 몇 개를, 한 개의 크기는?, 너만의 정렬방법을 알려줘)

	qsort(a.data(), a.size(), sizeof(int), [](const void* a, const void* b) {
		return *(int*)a - *(int*)b;
		});

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-28 목요일 오후 3:07:11
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// callable type -> 정렬 예제에서 시작
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 사이의 랜덤값으로 설정하라.
// int 값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{ 1, 10'000 };		//std::normal_distribution
std::default_random_engine dre;

int 정렬방법(const void* a, const void* b);

//--------
int main()
//--------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 오름차순 정렬한다. - qsort는 C 함수이지만, generic 함수이다.
	//qsort(어디를, 몇 개를, 한 개의 크기는?, 너만의 정렬방법을 알려줘)

	//qsort(a.data(), a.size(), sizeof(int), [](const void* a, const void* b) {
	//	return *(int*)a - *(int*)b;
	//	});
	//함수 = 정렬방법;
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;
}

================================================
STL.cpp:, 2024-03-28 목요일 오후 3:08:21
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 28일 목요일			(4주 2일)
// 
// callable type -> 정렬 예제에서 시작
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 사이의 랜덤값으로 설정하라.
// int 값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{ 1, 10'000 };		//std::normal_distribution
std::default_random_engine dre;

int 정렬방법(const void* a, const void* b);

//--------
int main()
//--------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 오름차순 정렬한다. - qsort는 C 함수이지만, generic 함수이다.
	//qsort(어디를, 몇 개를, 한 개의 크기는?, 너만의 정렬방법을 알려줘)

	//qsort(a.data(), a.size(), sizeof(int), [](const void* a, const void* b) {
	//	return *(int*)a - *(int*)b;
	//	});
	std::cout<<typeid(정렬방법).name()<<std::endl;
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;
}