

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 5일 화요일			(1주 1일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 콘솔창 크기 80x25
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	//for (char c : v)
	//	std::cout << c;

	out << std::endl << std::endl;
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	out << std::endl << std::endl;
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
저장한 시간: 
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick
	std::cout << now << std::endl;

	// 시간형식으로 변환
	// 현지 시간으로 변환
	// 한국형식으로 출력

	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << "저장한 시간: " << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
저장한 시간: 2024-03-07 목요일 오후 1:46:43
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = localtime(&utc);
	
	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	



	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << "저장한 시간: " << std::put_time(lt, "%x %A %X") << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	out.imbue(old);


	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
저장한 시간: 2024-03-07 목요일 오후 1:50:12
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };


	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = localtime(&utc);
	
	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	



	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << "저장한 시간: " << std::put_time(lt, "%x %A %X") << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	out.imbue(old);


	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 1:53:23
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
//using namespace std;	// 사용하지 않고 코딩

void save(std::string_view);

//--------
int main()
//--------

{
	std::cout << "2024 STL" << std::endl;
	save("STL.cpp");
}

//----------------------------------
void save(std::string_view fileName)
//----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	//std::cout << sizeof in << std::endl;
	//std::cout << addressof(in) << std::endl;
	//std::cout << typeid(in).name() << std::endl;

	if (not in) {
		std::cout << fileName << " 열기 실패" << std::endl;
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = localtime(&utc);
	
	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	
	out << std::endl << std::endl;
	out << "================================================" << std::endl;
	out << fileName << std::put_time(lt, ":, %x %A %X") << std::endl;
	out << "================================================" << std::endl;
	out << std::endl;

	out.imbue(old);

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
save.h:, 2024-03-07 목요일 오후 2:07:36
================================================

//------------------------------------------------------------------------
// save.h		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#pragma once

void save(std::string_view);

================================================
save.cpp:, 2024-03-07 목요일 오후 2:07:36
================================================

//------------------------------------------------------------------------
// save.cpp		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"

//----------------------------------
void save(std::string_view fileName)
//----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick
	auto utc = std::chrono::system_clock::to_time_t(now);
	auto lt = localtime(&utc);

	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "================================================" << '\n';
	out << fileName << std::put_time(lt, ":, %x %A %X") << '\n';
	out << "================================================" << '\n';
	out << '\n';

	out.imbue(old);

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 2:07:36
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
//				 - C++언어 SDL 검사 - no
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::cout << "save 기능을 완성함" << std::endl;
	save("save.h");
	save("save.cpp");
	save("STL.cpp");
}


================================================
save.h:, 2024-03-07 목요일 오후 2:08:05
================================================

//------------------------------------------------------------------------
// save.h		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#pragma once

void save(std::string_view);

================================================
save.cpp:, 2024-03-07 목요일 오후 2:08:05
================================================

//------------------------------------------------------------------------
// save.cpp		한 학기 강의를 저장한다.
// 
// 2024. 3. 7
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"

//----------------------------------
void save(std::string_view fileName)
//----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	// ifstream은 자료형		// RAII

	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다.(좋은 방식 아님)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 시간: 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로 부터 흐른 tick
	auto utc = std::chrono::system_clock::to_time_t(now);
	auto lt = localtime(&utc);

	// 한국형식으로 출력 (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	out << '\n' << '\n';
	out << "================================================" << '\n';
	out << fileName << std::put_time(lt, ":, %x %A %X") << '\n';
	out << "================================================" << '\n';
	out << '\n';

	out.imbue(old);

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 2:08:05
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// VisualStudio 17.9 이상, Release x64
// 프로젝트 속성 - 언어 /std:c++latest
//				 - C++언어 SDL 검사 - no
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

//--------
int main()
//--------
{
	std::cout << "save 기능을 완성함" << std::endl;
	save("save.h");
	save("save.cpp");
	save("STL.cpp");
}


================================================
STL.cpp:, 2024-03-07 목요일 오후 2:33:56
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp;

	tmp = a;
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 2:35:16
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.

void change(int&, int&);

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 3:07:14
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog;					// forward declaration
void change(int&, int&);
void change(Dog&, Dog&);

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.
// 출력 연산자 오버로딩...........?
class Dog {
public:
	Dog(int n) : num(num) {}
	// Dog(const Dog&) {};	// 복사 생성할 필요 없음. 
	// 이유 - 이 함수는 special function임. special function은 필요하면 컴파일러가 자동으로 생성. 즉 생성할 필요 x
	operator int() { return num; }	// 이거 뭐지?

private:
	int num;
};

//--------
int main()
//--------
{
	Dog a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(Dog& a, Dog& b)
{
	Dog tmp{ a };		// copy construction	복사 생성
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 3:09:03
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog;					// forward declaration
void change(int&, int&);
void change(Dog&, Dog&);

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.
// 출력 연산자 오버로딩...........?
class Dog {
public:
	Dog(int n) : num(num) {}
	// Dog(const Dog&) {};	// 복사 생성할 필요 없음. 
	// 이유 - 이 함수는 special function임. special function은 필요하면 컴파일러가 자동으로 생성. 즉 생성할 필요 x
	//operator int() { return num; }	// 이거 뭐지?
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num;
};

//--------
int main()
//--------
{
	Dog a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(Dog& a, Dog& b)
{
	Dog tmp{ a };		// copy construction	복사 생성
	a = b;
	b = tmp;
}

================================================
STL.cpp:, 2024-03-07 목요일 오후 3:09:52
================================================

//------------------------------------------------------------------------
// 2024.	1학기 STL 화56목56      3월 7일 화요일			(1주 2일)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "save.h"
//using namespace std;	// 사용하지 않고 코딩

class Dog;					// forward declaration
void change(int&, int&);
void change(Dog&, Dog&);

// [문제] main()을 변경하지 말고, 의도대로 실행되도록 change()를 선언하고 정의하라.
// 출력 연산자 오버로딩...........?
class Dog {
public:
	Dog(int n) : num(n) {}
	// Dog(const Dog&) {};	// 복사 생성할 필요 없음. 
	// 이유 - 이 함수는 special function임. special function은 필요하면 컴파일러가 자동으로 생성. 즉 생성할 필요 x
	//operator int() { return num; }	// 이거 뭐지?
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog) {
		return os << dog.num;
	}

private:
	int num;
};

//--------
int main()
//--------
{
	Dog a{ 1 }, b{ 2 };	// { : 유니폼 이니셜라이져

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 실행 결과: 2, 1

	save("STL.cpp");
}

void change(int& a, int& b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(Dog& a, Dog& b)
{
	Dog tmp{ a };		// copy construction	복사 생성
	a = b;
	b = tmp;
}